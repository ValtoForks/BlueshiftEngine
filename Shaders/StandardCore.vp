in HIGHP vec4 in_position   : POSITION;
in LOWP vec3 in_normal      : NORMAL;
in LOWP vec4 in_color       : COLOR;
in MEDIUMP vec2 in_st       : TEXCOORD0;

#if _NORMAL != 0
    in LOWP vec4 in_tangent : TANGENT;
#endif

out LOWP vec4 v2f_color;
out MEDIUMP vec2 v2f_tex;

#if _NORMAL == 0
    out LOWP vec3 v2f_normal;
#endif

#if _PARALLAX
    out vec3 v2f_tangentViewDir;
#endif

#ifdef DIRECT_LIGHTING
    out vec3 v2f_lightVector;
    out vec3 v2f_lightFallOff;
    out vec4 v2f_lightProjection;
#endif

#if defined(DIRECT_LIGHTING) || defined(INDIRECT_LIGHTING)
    out vec3 v2f_viewVector;

    #if _NORMAL == 0
        out vec3 v2f_worldPos;
    #else
        out vec4 v2f_toWorldAndPackedWorldPosS;
        out vec4 v2f_toWorldAndPackedWorldPosT;
        out vec4 v2f_toWorldAndPackedWorldPosR;
    #endif
#endif

#ifdef USE_SHADOW_MAP
$include "ShadowLibrary.vp"
#endif

#if defined(INSTANCING)
$include "Instancing.vp"
#else
    uniform vec4 localToWorldMatrixS;
    uniform vec4 localToWorldMatrixT;
    uniform vec4 localToWorldMatrixR;
    uniform vec4 worldToLocalMatrixS;
    uniform vec4 worldToLocalMatrixT;
    uniform vec4 worldToLocalMatrixR;
    uniform LOWP vec4 constantColor;
#endif

#ifdef GPU_SKINNING
    #if defined(GPU_SKINNING_1_WEIGHTS)
        $include "SkinningMatrix1.glsl"
    #elif defined(GPU_SKINNING_4_WEIGHTS)
        $include "SkinningMatrix4.glsl"
    #elif defined(GPU_SKINNING_8_WEIGHTS)
        $include "SkinningMatrix8.glsl"
    #endif
#endif

uniform vec4 textureMatrixS;
uniform vec4 textureMatrixT;
uniform LOWP vec4 vertexColorScale;
uniform LOWP vec4 vertexColorAdd;

uniform vec3 viewOrigin;                // eye position in world space
uniform vec4 lightVec;                  // light position or light direction in world space
uniform mat4 viewProjectionMatrix;
uniform mat4 modelViewProjectionMatrix;
uniform vec3 lightInvRadius;
uniform mat4x3 lightFallOffMatrix;
uniform mat4 lightTextureMatrix;
uniform bool useShadowMap;

void main() {
#if _NORMAL == 0
    vec4 localPos;
    vec3 localNormal;

    #ifdef COMPRESSED_VERTEX_NORMAL_TANGENTS
        vec3 vNormal = in_normal.xyz * 2.0 - 1.0;
    #else
        vec3 vNormal = in_normal.xyz;
    #endif
    
    #ifdef GPU_SKINNING
        skinningMatrix(in_position, localPos, vNormal, localNormal);
    #else
        localPos = in_position;
        localNormal = vNormal;
    #endif
#else
    vec4 localPos;
    vec3 localNormal;
    vec3 localTangent;
    vec3 localBiTangent;

    #ifdef COMPRESSED_VERTEX_NORMAL_TANGENTS
        vec3 vNormal = in_normal.xyz * 2.0 - 1.0;
        vec4 vTangent = in_tangent * 2.0 - 1.0;
    #else
        vec3 vNormal = in_normal.xyz;
        vec4 vTangent = in_tangent;
    #endif

    #ifdef GPU_SKINNING
        skinningMatrix(in_position, localPos, vNormal, localNormal, vTangent, localTangent, localBiTangent);
    #else
        localPos = in_position;
        localNormal = vNormal;
        localTangent = vTangent.xyz;
        localBiTangent = normalize(cross(vNormal, vTangent.xyz) * vTangent.w);
    #endif
#endif

    vec4 worldPos;
    worldPos.x = dot(localToWorldMatrixS, localPos);
    worldPos.y = dot(localToWorldMatrixT, localPos);
    worldPos.z = dot(localToWorldMatrixR, localPos);
    worldPos.w = 1.0;

#if defined(DIRECT_LIGHTING) || defined(INDIRECT_LIGHTING)
    vec3 worldV = viewOrigin.xyz - worldPos.xyz;
    v2f_viewVector = worldV;

    #if _NORMAL == 0
        v2f_normal.x = dot(localToWorldMatrixS.xyz, localNormal);
        v2f_normal.y = dot(localToWorldMatrixT.xyz, localNormal);
        v2f_normal.z = dot(localToWorldMatrixR.xyz, localNormal);

        v2f_worldPos = worldPos.xyz;
    #else
        mat3 TBN = mat3(localTangent, localBiTangent, localNormal);

        #if _PARALLAX
            vec3 localV;
            localV.x = dot(worldToLocalMatrixS.xyz, worldV);
            localV.y = dot(worldToLocalMatrixT.xyz, worldV);
            localV.z = dot(worldToLocalMatrixR.xyz, worldV);

            v2f_tangentViewDir = localV * TBN;
        #endif

        // Build the matrix to transform tangent space into GL world space
        v2f_toWorldAndPackedWorldPosS.xyz = localToWorldMatrixS.xyz * TBN;
        v2f_toWorldAndPackedWorldPosT.xyz = localToWorldMatrixT.xyz * TBN;
        v2f_toWorldAndPackedWorldPosR.xyz = localToWorldMatrixR.xyz * TBN;
        //v2f_toWorldAndPackedWorldPosT.w = in_tangent.w;

        #ifdef INDIRECT_LIGHTING
            v2f_toWorldAndPackedWorldPosS.w = worldPos.x;
            v2f_toWorldAndPackedWorldPosT.w = worldPos.y;
            v2f_toWorldAndPackedWorldPosR.w = worldPos.z;
        #endif 
    #endif
#endif

#ifdef DIRECT_LIGHTING
    // Light direction in world space
    vec3 worldL = lightVec.xyz - lightVec.w * worldPos.xyz;

    #ifdef USE_SHADOW_MAP
        #ifdef USE_SHADOW_POINT
            ShadowCubeTransform(worldL);
        #elif defined(USE_SHADOW_SPOT) || defined(USE_SHADOW_CASCADE)
            ShadowTransform(worldPos);
        #endif
    #endif

    v2f_lightVector = worldL;
    v2f_lightProjection = lightTextureMatrix * worldPos;
    v2f_lightFallOff = lightFallOffMatrix * worldPos;
#endif

    v2f_tex.s = dot(textureMatrixS, vec4(in_st, 0.0, 1.0));
    v2f_tex.t = dot(textureMatrixT, vec4(in_st, 0.0, 1.0));

#ifdef LIGHTMAP
    v2f_tex.rq = in_st2.st;
#endif

    v2f_color = (in_color * vertexColorScale + vertexColorAdd) * constantColor;

#ifdef INSTANCING
    gl_Position = viewProjectionMatrix * worldPos;
#else
    gl_Position = modelViewProjectionMatrix * localPos;
#endif
}
