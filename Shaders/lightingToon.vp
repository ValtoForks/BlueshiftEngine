in vec4 in_position : POSITION;
in vec3 in_normal : NORMAL;
in vec4 in_color : COLOR;
in vec2 in_st : TEXCOORD0;

out vec4 v2f_color;
out vec3 v2f_normal;
out vec3 v2f_lightVector;
out vec2 v2f_texCoord;
out vec3 v2f_viewVector;
out vec3 v2f_lightFallOff;
out vec4 v2f_lightProjection;

#ifdef USE_SHADOW_MAP
$include "ShadowLibrary.vp"
#endif

#if defined(INSTANCING)
$include "Instancing.vp"
#else
    uniform vec4 localToWorldMatrixS;
    uniform vec4 localToWorldMatrixT;
    uniform vec4 localToWorldMatrixR;
    uniform LOWP vec4 constantColor;
#endif

#ifdef GPU_SKINNING
    #if defined(GPU_SKINNING_1_WEIGHTS)
        $include "SkinningMatrix1.glsl"
    #elif defined(GPU_SKINNING_4_WEIGHTS)
        $include "SkinningMatrix4.glsl"
    #elif defined(GPU_SKINNING_8_WEIGHTS)
        $include "SkinningMatrix8.glsl"
    #endif
#endif

uniform vec4 textureMatrixS;
uniform vec4 textureMatrixT;
uniform LOWP vec4 vertexColorScale;
uniform LOWP vec4 vertexColorAdd;

uniform vec3 viewOrigin;
uniform vec4 lightVec;
uniform mat4 viewProjectionMatrix;
uniform mat4 modelViewProjectionMatrix;
uniform vec3 lightInvRadius;
uniform mat4 lightTextureMatrix;
uniform bool useShadowMap;

void main() {
#ifdef COMPRESSED_VERTEX_NORMAL_TANGENTS
	vec3 vNormal = in_normal.xyz * 2.0 - 1.0;
#else
	vec3 vNormal = in_normal.xyz;
#endif

	vec4 localPos;
	vec3 localNormal;

#ifdef GPU_SKINNING
	skinningMatrix(in_position, localPos, vNormal, localNormal);
#else
	localPos = in_position;
	localNormal = vNormal;
#endif

	vec4 worldPos;
	worldPos.x = dot(localToWorldMatrixS, localPos);
	worldPos.y = dot(localToWorldMatrixT, localPos);
	worldPos.z = dot(localToWorldMatrixR, localPos);
	worldPos.w = 1.0;

    vec3 worldV = viewOrigin.xyz - worldPos.xyz;
    v2f_viewVector = worldV;

    v2f_normal.x = dot(localToWorldMatrixS.xyz, localNormal);
    v2f_normal.y = dot(localToWorldMatrixT.xyz, localNormal);
    v2f_normal.z = dot(localToWorldMatrixR.xyz, localNormal);

    vec3 worldL = lightVec.xyz - lightVec.w * worldPos.xyz;

#ifdef USE_SHADOW_MAP
	#ifdef USE_SHADOW_POINT
		ShadowCubeTransform(worldL);
	#elif defined(USE_SHADOW_SPOT) || defined(USE_SHADOW_CASCADE)
		ShadowTransform(worldPos);
	#endif
#endif

	v2f_lightVector = worldL;
    v2f_lightProjection = lightTextureMatrix * worldPos;
    v2f_lightFallOff = worldL * lightInvRadius;

	v2f_texCoord.x = dot(textureMatrixS, vec4(in_st, 0.0, 1.0));
	v2f_texCoord.y = dot(textureMatrixT, vec4(in_st, 0.0, 1.0));

	v2f_color = (in_color * vertexColorScale + vertexColorAdd) * constantColor;

#ifdef INSTANCING
    gl_Position = viewProjectionMatrix * worldPos;
#else
    gl_Position = modelViewProjectionMatrix * localPos;
#endif
}
