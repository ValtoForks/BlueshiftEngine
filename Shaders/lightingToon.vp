in vec4 in_position : POSITION;
in vec3 in_normal : NORMAL;
in vec4 in_color : COLOR;
in vec2 in_st : TEXCOORD0;

#ifdef USE_SHADOW_MAP
$include "ShadowLibrary.vp"
#endif

out vec4 v2f_color;
out vec3 v2f_normal;
out vec3 v2f_lightVector;
out vec2 v2f_texCoord;
out vec3 v2f_viewVector;
out vec3 v2f_lightFallOff;
out vec4 v2f_lightProjection;

#ifdef INSTANCED_DRAW
	struct entityData_t {
		vec4 worldMatrixS;
		vec4 worldMatrixT;
		vec4 worldMatrixR;
		vec3 localViewOrigin;
		mat3 localLightAxis;
		vec4 localLightOrigin;
		vec4 textureMatrixS;
		vec4 textureMatrixT;
		vec4 vertexColorScale;
		vec4 vertexColorAdd;
		vec4 constantColor;
	};

	uniform entityData_t entityData[256];
	#define ED entityData[gl_InstanceIDARB]
#else
	uniform vec4 worldMatrixS;
	uniform vec4 worldMatrixT;
	uniform vec4 worldMatrixR;
	uniform vec3 localViewOrigin;
	uniform mat3 localLightAxis;
	uniform vec4 localLightOrigin;
	uniform vec4 textureMatrixS;
	uniform vec4 textureMatrixT;
	uniform vec4 vertexColorScale;
	uniform vec4 vertexColorAdd;
	uniform vec4 constantColor;
#endif

uniform mat4 modelViewProjectionMatrix;
uniform vec3 lightInvRadius;
uniform mat4 lightTextureMatrix;
uniform bool useShadowMap;

void main() {
#ifdef COMPRESSED_VERTEX_NORMAL_TANGENTS
	vec3 vNormal = in_normal.xyz * 2.0 - 1.0;
#else
	vec3 vNormal = in_normal.xyz;
#endif

	vec4 localVertex;
	vec3 localNormal;

#ifdef GPU_SKINNING
	skinningMatrix(in_position, localVertex, vNormal, localNormal);
#else
	localVertex = in_position;
	localNormal = vNormal;
#endif

	vec4 worldVertex;
	worldVertex.x = dot(worldMatrixS, localVertex);
	worldVertex.y = dot(worldMatrixT, localVertex);
	worldVertex.z = dot(worldMatrixR, localVertex);
	worldVertex.w = 1.0;

	v2f_lightProjection = lightTextureMatrix * worldVertex;

#ifdef USE_SHADOW_MAP
	#ifdef USE_SHADOW_POINT
		ShadowCubeTransform(localVertex, localLightOrigin.xyz, worldMatrixS.xyz, worldMatrixT.xyz, worldMatrixR.xyz);
	#elif defined(USE_SHADOW_SPOT) || defined(USE_SHADOW_CASCADE)
		ShadowTransform(worldVertex);
	#endif
#endif

	vec3 L = localLightOrigin.xyz + (localLightOrigin.w - 1.0) * localVertex.xyz;
	vec3 V = localViewOrigin.xyz - localVertex.xyz;

	v2f_lightFallOff = (L * localLightAxis) * lightInvRadius;
	v2f_lightVector = L;
	v2f_viewVector = V;

	v2f_normal = localNormal;

	v2f_texCoord.x = dot(textureMatrixS, vec4(in_st, 0.0, 1.0));
	v2f_texCoord.y = dot(textureMatrixT, vec4(in_st, 0.0, 1.0));

	v2f_color = (in_color * vertexColorScale + vertexColorAdd) * constantColor;

	gl_Position = modelViewProjectionMatrix * localVertex;
}
