in vec4 in_position : POSITION;
in vec3 in_normal : NORMAL;
in vec4 in_color : COLOR;
in vec2 in_st : TEXCOORD0;
in vec4 in_tangent : TANGENT;

out vec3 v2f_color;
out vec2 v2f_texCoord;
out vec3 v2f_eyeVector;
out vec2 v2f_distortion;
out vec3 v2f_toWorldS;
out vec3 v2f_toWorldT;
out vec3 v2f_toWorldR;

#if defined(INSTANCING)
$include "Instancing.vp"
#else
	uniform vec4 localToWorldMatrixS;
	uniform vec4 localToWorldMatrixT;
	uniform vec4 localToWorldMatrixR;
	uniform vec4 constantColor;
#endif

#ifdef GPU_SKINNING
    #if defined(GPU_SKINNING_1_WEIGHTS)
        $include "SkinningMatrix1.glsl"
    #elif defined(GPU_SKINNING_4_WEIGHTS)
        $include "SkinningMatrix4.glsl"
    #elif defined(GPU_SKINNING_8_WEIGHTS)
        $include "SkinningMatrix8.glsl"
    #endif
#endif

uniform vec4 textureMatrixS;
uniform vec4 textureMatrixT;
uniform vec4 vertexColorScale;
uniform vec4 vertexColorAdd;

uniform mat4 modelViewProjectionMatrix;
uniform mat4 modelViewMatrixTranspose;
uniform mat4 projectionMatrixTranspose;

void main() {
#ifdef COMPRESSED_VERTEX_NORMAL_TANGENTS
	vec3 vNormal = in_normal.xyz * 2.0 - 1.0;
    vec4 vTangent = in_tangent * 2.0 - 1.0;
#else
	vec3 vNormal = in_normal.xyz;
    vec4 vTangent = in_tangent;
#endif

	vec3 tan = vTangent.xyz;
	vec3 bitan = cross(vNormal, vTangent.xyz) * vTangent.w;
	mat3 TBN = mat3(tan, bitan, vNormal);

	vec3 E = in_position.xyz - localViewOrigin.xyz;

	v2f_eyeVector.xyz = E * TBN;

	v2f_toWorldS = localToWorldMatrixS.xyz * TBN;
	v2f_toWorldT = localToWorldMatrixT.xyz * TBN;
	v2f_toWorldR = localToWorldMatrixR.xyz * TBN;

	v2f_texCoord.x = dot(textureMatrixS, vec4(in_st, 0.0, 1.0));
	v2f_texCoord.y = dot(textureMatrixT, vec4(in_st, 0.0, 1.0));

	v2f_color = (in_color * vertexColorScale + vertexColorAdd) * constantColor;

	vec4 temp = vec4(1.0, 0.0, 0.0, 1.0);
	temp.z = dot(modelViewMatrixTranspose[2], in_position);
	v2f_distortion.x = dot(temp, projectionMatrixTranspose[0]);
	v2f_distortion.y = dot(temp, projectionMatrixTranspose[3]);

	gl_Position = modelViewProjectionMatrix * in_position;
}
